# Generated from C:/Users/k1r2n/PycharmProjects/Lexer\pyLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,5,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,167,8,0,1,1,1,1,5,1,171,8,
        1,10,1,12,1,174,9,1,1,2,4,2,177,8,2,11,2,12,2,178,1,2,3,2,182,8,
        2,1,2,5,2,185,8,2,10,2,12,2,188,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,204,8,3,1,4,1,4,1,4,1,4,0,0,5,1,
        1,3,2,5,3,7,4,9,5,1,0,7,2,0,65,90,97,122,3,0,48,57,65,90,97,122,
        1,0,48,57,1,0,46,46,9,0,33,34,37,37,39,43,45,45,60,62,91,91,93,93,
        123,123,125,125,5,0,35,35,44,44,46,47,58,59,63,63,3,0,9,10,13,13,
        32,32,254,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,1,166,1,0,0,0,3,168,1,0,0,0,5,176,1,0,0,0,7,203,1,0,0,0,9,
        205,1,0,0,0,11,12,5,84,0,0,12,13,5,114,0,0,13,14,5,117,0,0,14,167,
        5,101,0,0,15,16,5,70,0,0,16,17,5,97,0,0,17,18,5,108,0,0,18,19,5,
        115,0,0,19,167,5,101,0,0,20,21,5,78,0,0,21,22,5,111,0,0,22,23,5,
        110,0,0,23,167,5,101,0,0,24,25,5,97,0,0,25,26,5,110,0,0,26,167,5,
        100,0,0,27,28,5,111,0,0,28,167,5,114,0,0,29,30,5,110,0,0,30,31,5,
        111,0,0,31,167,5,116,0,0,32,33,5,105,0,0,33,167,5,110,0,0,34,35,
        5,105,0,0,35,167,5,115,0,0,36,37,5,105,0,0,37,167,5,102,0,0,38,39,
        5,101,0,0,39,40,5,108,0,0,40,41,5,115,0,0,41,167,5,101,0,0,42,43,
        5,101,0,0,43,44,5,108,0,0,44,45,5,105,0,0,45,167,5,102,0,0,46,47,
        5,102,0,0,47,48,5,111,0,0,48,167,5,114,0,0,49,50,5,119,0,0,50,51,
        5,104,0,0,51,52,5,105,0,0,52,53,5,108,0,0,53,167,5,101,0,0,54,55,
        5,98,0,0,55,56,5,114,0,0,56,57,5,101,0,0,57,58,5,97,0,0,58,167,5,
        107,0,0,59,60,5,99,0,0,60,61,5,111,0,0,61,62,5,110,0,0,62,63,5,116,
        0,0,63,64,5,105,0,0,64,65,5,110,0,0,65,66,5,117,0,0,66,167,5,101,
        0,0,67,68,5,112,0,0,68,69,5,114,0,0,69,70,5,105,0,0,70,71,5,110,
        0,0,71,167,5,116,0,0,72,73,5,114,0,0,73,74,5,97,0,0,74,75,5,110,
        0,0,75,76,5,103,0,0,76,167,5,101,0,0,77,78,5,100,0,0,78,79,5,101,
        0,0,79,167,5,102,0,0,80,81,5,109,0,0,81,82,5,97,0,0,82,83,5,105,
        0,0,83,167,5,110,0,0,84,85,5,118,0,0,85,86,5,111,0,0,86,87,5,105,
        0,0,87,167,5,100,0,0,88,89,5,105,0,0,89,90,5,110,0,0,90,167,5,116,
        0,0,91,92,5,102,0,0,92,93,5,108,0,0,93,94,5,111,0,0,94,95,5,97,0,
        0,95,167,5,116,0,0,96,97,5,115,0,0,97,98,5,116,0,0,98,99,5,114,0,
        0,99,100,5,105,0,0,100,101,5,110,0,0,101,167,5,103,0,0,102,103,5,
        98,0,0,103,104,5,111,0,0,104,105,5,111,0,0,105,106,5,108,0,0,106,
        107,5,101,0,0,107,108,5,97,0,0,108,167,5,110,0,0,109,110,5,99,0,
        0,110,111,5,108,0,0,111,112,5,97,0,0,112,113,5,115,0,0,113,167,5,
        115,0,0,114,115,5,119,0,0,115,116,5,105,0,0,116,117,5,116,0,0,117,
        167,5,104,0,0,118,119,5,97,0,0,119,167,5,115,0,0,120,121,5,112,0,
        0,121,122,5,97,0,0,122,123,5,115,0,0,123,167,5,115,0,0,124,125,5,
        105,0,0,125,126,5,109,0,0,126,127,5,112,0,0,127,128,5,111,0,0,128,
        129,5,114,0,0,129,167,5,116,0,0,130,131,5,102,0,0,131,132,5,114,
        0,0,132,133,5,111,0,0,133,167,5,109,0,0,134,135,5,116,0,0,135,136,
        5,114,0,0,136,167,5,121,0,0,137,138,5,101,0,0,138,139,5,120,0,0,
        139,140,5,99,0,0,140,141,5,101,0,0,141,142,5,112,0,0,142,167,5,116,
        0,0,143,144,5,114,0,0,144,145,5,97,0,0,145,146,5,105,0,0,146,147,
        5,115,0,0,147,167,5,101,0,0,148,149,5,114,0,0,149,150,5,101,0,0,
        150,151,5,116,0,0,151,152,5,117,0,0,152,153,5,114,0,0,153,167,5,
        110,0,0,154,155,5,102,0,0,155,156,5,105,0,0,156,157,5,110,0,0,157,
        158,5,97,0,0,158,159,5,108,0,0,159,160,5,108,0,0,160,167,5,121,0,
        0,161,162,5,105,0,0,162,163,5,110,0,0,163,164,5,112,0,0,164,165,
        5,117,0,0,165,167,5,116,0,0,166,11,1,0,0,0,166,15,1,0,0,0,166,20,
        1,0,0,0,166,24,1,0,0,0,166,27,1,0,0,0,166,29,1,0,0,0,166,32,1,0,
        0,0,166,34,1,0,0,0,166,36,1,0,0,0,166,38,1,0,0,0,166,42,1,0,0,0,
        166,46,1,0,0,0,166,49,1,0,0,0,166,54,1,0,0,0,166,59,1,0,0,0,166,
        67,1,0,0,0,166,72,1,0,0,0,166,77,1,0,0,0,166,80,1,0,0,0,166,84,1,
        0,0,0,166,88,1,0,0,0,166,91,1,0,0,0,166,96,1,0,0,0,166,102,1,0,0,
        0,166,109,1,0,0,0,166,114,1,0,0,0,166,118,1,0,0,0,166,120,1,0,0,
        0,166,124,1,0,0,0,166,130,1,0,0,0,166,134,1,0,0,0,166,137,1,0,0,
        0,166,143,1,0,0,0,166,148,1,0,0,0,166,154,1,0,0,0,166,161,1,0,0,
        0,167,2,1,0,0,0,168,172,7,0,0,0,169,171,7,1,0,0,170,169,1,0,0,0,
        171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,4,1,0,0,0,174,
        172,1,0,0,0,175,177,7,2,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,
        176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,182,7,3,0,0,181,
        180,1,0,0,0,181,182,1,0,0,0,182,186,1,0,0,0,183,185,7,2,0,0,184,
        183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
        6,1,0,0,0,188,186,1,0,0,0,189,204,7,4,0,0,190,191,5,60,0,0,191,204,
        5,61,0,0,192,193,5,62,0,0,193,204,5,61,0,0,194,195,5,61,0,0,195,
        204,5,61,0,0,196,197,5,33,0,0,197,204,5,61,0,0,198,199,5,42,0,0,
        199,204,5,42,0,0,200,201,5,60,0,0,201,204,5,62,0,0,202,204,7,5,0,
        0,203,189,1,0,0,0,203,190,1,0,0,0,203,192,1,0,0,0,203,194,1,0,0,
        0,203,196,1,0,0,0,203,198,1,0,0,0,203,200,1,0,0,0,203,202,1,0,0,
        0,204,8,1,0,0,0,205,206,7,6,0,0,206,207,1,0,0,0,207,208,6,4,0,0,
        208,10,1,0,0,0,7,0,166,172,178,181,186,203,1,6,0,0
    ]

class pyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PR = 1
    ID = 2
    NUMERO = 3
    SIMBOLO = 4
    WS = 5

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PR", "ID", "NUMERO", "SIMBOLO", "WS" ]

    ruleNames = [ "PR", "ID", "NUMERO", "SIMBOLO", "WS" ]

    grammarFileName = "pyLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


