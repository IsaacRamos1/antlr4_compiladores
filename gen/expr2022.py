# Generated from C:/Users/isac_/PycharmProjects/antlr4_compiladores\expr2022.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,5,206,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,3,0,162,8,0,1,1,1,1,5,1,166,8,1,10,1,12,1,169,9,1,
        1,2,4,2,172,8,2,11,2,12,2,173,1,2,3,2,177,8,2,1,2,5,2,180,8,2,10,
        2,12,2,183,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,3,3,201,8,3,1,4,1,4,1,4,1,4,0,0,5,1,1,3,2,5,3,7,4,
        9,5,1,0,8,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,1,0,
        46,46,8,0,33,33,35,35,37,37,42,43,45,45,47,47,61,61,63,63,7,0,40,
        41,60,60,62,62,91,91,93,93,123,123,125,125,3,0,44,44,46,46,58,59,
        3,0,9,10,13,13,32,32,253,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,1,161,1,0,0,0,3,163,1,0,0,0,5,171,1,0,0,0,7,
        200,1,0,0,0,9,202,1,0,0,0,11,12,5,84,0,0,12,13,5,114,0,0,13,14,5,
        117,0,0,14,162,5,101,0,0,15,16,5,70,0,0,16,17,5,97,0,0,17,18,5,108,
        0,0,18,19,5,115,0,0,19,162,5,101,0,0,20,21,5,102,0,0,21,22,5,111,
        0,0,22,162,5,114,0,0,23,24,5,105,0,0,24,162,5,110,0,0,25,26,5,114,
        0,0,26,27,5,97,0,0,27,28,5,110,0,0,28,29,5,103,0,0,29,162,5,101,
        0,0,30,31,5,78,0,0,31,32,5,111,0,0,32,33,5,110,0,0,33,162,5,101,
        0,0,34,35,5,97,0,0,35,36,5,110,0,0,36,162,5,100,0,0,37,38,5,111,
        0,0,38,162,5,114,0,0,39,40,5,110,0,0,40,41,5,111,0,0,41,162,5,116,
        0,0,42,43,5,105,0,0,43,162,5,102,0,0,44,45,5,101,0,0,45,46,5,108,
        0,0,46,47,5,115,0,0,47,162,5,101,0,0,48,49,5,101,0,0,49,50,5,108,
        0,0,50,51,5,115,0,0,51,52,5,105,0,0,52,162,5,102,0,0,53,54,5,119,
        0,0,54,55,5,104,0,0,55,56,5,105,0,0,56,57,5,108,0,0,57,162,5,101,
        0,0,58,59,5,100,0,0,59,162,5,111,0,0,60,61,5,99,0,0,61,62,5,111,
        0,0,62,63,5,110,0,0,63,64,5,116,0,0,64,65,5,105,0,0,65,66,5,110,
        0,0,66,67,5,117,0,0,67,162,5,101,0,0,68,69,5,98,0,0,69,70,5,114,
        0,0,70,71,5,101,0,0,71,72,5,97,0,0,72,162,5,107,0,0,73,74,5,105,
        0,0,74,75,5,110,0,0,75,76,5,112,0,0,76,77,5,117,0,0,77,162,5,116,
        0,0,78,79,5,109,0,0,79,80,5,97,0,0,80,81,5,105,0,0,81,162,5,110,
        0,0,82,83,5,100,0,0,83,84,5,101,0,0,84,162,5,102,0,0,85,86,5,102,
        0,0,86,87,5,108,0,0,87,88,5,111,0,0,88,89,5,97,0,0,89,162,5,116,
        0,0,90,91,5,105,0,0,91,92,5,110,0,0,92,162,5,116,0,0,93,94,5,98,
        0,0,94,95,5,111,0,0,95,96,5,111,0,0,96,162,5,108,0,0,97,98,5,115,
        0,0,98,99,5,116,0,0,99,100,5,114,0,0,100,101,5,105,0,0,101,102,5,
        110,0,0,102,162,5,103,0,0,103,104,5,99,0,0,104,105,5,108,0,0,105,
        106,5,97,0,0,106,107,5,115,0,0,107,162,5,115,0,0,108,109,5,97,0,
        0,109,162,5,115,0,0,110,111,5,116,0,0,111,112,5,114,0,0,112,162,
        5,121,0,0,113,114,5,99,0,0,114,115,5,97,0,0,115,116,5,116,0,0,116,
        117,5,99,0,0,117,162,5,104,0,0,118,119,5,101,0,0,119,120,5,120,0,
        0,120,121,5,99,0,0,121,122,5,101,0,0,122,123,5,112,0,0,123,124,5,
        116,0,0,124,125,5,105,0,0,125,126,5,111,0,0,126,162,5,110,0,0,127,
        128,5,105,0,0,128,129,5,109,0,0,129,130,5,112,0,0,130,131,5,111,
        0,0,131,132,5,114,0,0,132,162,5,116,0,0,133,134,5,102,0,0,134,135,
        5,114,0,0,135,136,5,111,0,0,136,162,5,109,0,0,137,138,5,114,0,0,
        138,139,5,101,0,0,139,140,5,116,0,0,140,141,5,117,0,0,141,142,5,
        114,0,0,142,162,5,110,0,0,143,144,5,108,0,0,144,145,5,105,0,0,145,
        146,5,115,0,0,146,162,5,116,0,0,147,148,5,100,0,0,148,149,5,105,
        0,0,149,150,5,99,0,0,150,162,5,116,0,0,151,152,5,116,0,0,152,153,
        5,117,0,0,153,154,5,112,0,0,154,155,5,108,0,0,155,162,5,101,0,0,
        156,157,5,112,0,0,157,158,5,114,0,0,158,159,5,105,0,0,159,160,5,
        110,0,0,160,162,5,116,0,0,161,11,1,0,0,0,161,15,1,0,0,0,161,20,1,
        0,0,0,161,23,1,0,0,0,161,25,1,0,0,0,161,30,1,0,0,0,161,34,1,0,0,
        0,161,37,1,0,0,0,161,39,1,0,0,0,161,42,1,0,0,0,161,44,1,0,0,0,161,
        48,1,0,0,0,161,53,1,0,0,0,161,58,1,0,0,0,161,60,1,0,0,0,161,68,1,
        0,0,0,161,73,1,0,0,0,161,78,1,0,0,0,161,82,1,0,0,0,161,85,1,0,0,
        0,161,90,1,0,0,0,161,93,1,0,0,0,161,97,1,0,0,0,161,103,1,0,0,0,161,
        108,1,0,0,0,161,110,1,0,0,0,161,113,1,0,0,0,161,118,1,0,0,0,161,
        127,1,0,0,0,161,133,1,0,0,0,161,137,1,0,0,0,161,143,1,0,0,0,161,
        147,1,0,0,0,161,151,1,0,0,0,161,156,1,0,0,0,162,2,1,0,0,0,163,167,
        7,0,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,
        1,0,0,0,167,168,1,0,0,0,168,4,1,0,0,0,169,167,1,0,0,0,170,172,7,
        2,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,
        0,0,0,174,176,1,0,0,0,175,177,7,3,0,0,176,175,1,0,0,0,176,177,1,
        0,0,0,177,181,1,0,0,0,178,180,7,2,0,0,179,178,1,0,0,0,180,183,1,
        0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,6,1,0,0,0,183,181,1,0,
        0,0,184,201,1,0,0,0,185,201,5,34,0,0,186,201,1,0,0,0,187,201,7,4,
        0,0,188,189,5,61,0,0,189,201,5,61,0,0,190,201,7,5,0,0,191,192,5,
        60,0,0,192,201,5,61,0,0,193,194,5,62,0,0,194,201,5,61,0,0,195,196,
        5,33,0,0,196,201,5,61,0,0,197,198,5,42,0,0,198,201,5,42,0,0,199,
        201,7,6,0,0,200,184,1,0,0,0,200,185,1,0,0,0,200,186,1,0,0,0,200,
        187,1,0,0,0,200,188,1,0,0,0,200,190,1,0,0,0,200,191,1,0,0,0,200,
        193,1,0,0,0,200,195,1,0,0,0,200,197,1,0,0,0,200,199,1,0,0,0,201,
        8,1,0,0,0,202,203,7,7,0,0,203,204,1,0,0,0,204,205,6,4,0,0,205,10,
        1,0,0,0,7,0,161,167,173,176,181,200,1,6,0,0
    ]

class expr2022(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PR = 1
    ID = 2
    NUM = 3
    SB = 4
    WS = 5

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PR", "ID", "NUM", "SB", "WS" ]

    ruleNames = [ "PR", "ID", "NUM", "SB", "WS" ]

    grammarFileName = "expr2022.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


